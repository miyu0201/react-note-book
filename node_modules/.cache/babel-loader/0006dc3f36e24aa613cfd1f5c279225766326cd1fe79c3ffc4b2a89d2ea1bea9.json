{"ast":null,"code":"var _jsxFileName = \"C:\\\\E\\\\Study\\\\Code\\\\react and restful API . hook tutorial\\\\react-note-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Sidebar from './components/Sidebar';\nimport Content from './components/Content';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //const [notes,setNotes]=useState([])\n  //inital the app by get item from localstorage, remember to add [], as it cause error when lcalstorage \"notes\" not initialized/defined at first time \n  const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  //make sure notes[0] exist and then fint the id, or use \"\" instead \n  const [currentNoteId, setCurrentNoteId] = useState(notes[0] && notes[0].id || \"\");\n  useEffect(() => {\n    const allNotes = JSON.stringify(notes);\n    localStorage.setItem(\"notes\", allNotes);\n  }, [notes]);\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      title: \"new note\",\n      text: \"#Please enter note content here.\",\n      important: false\n    };\n    //use [] , as it is an array\n    setNotes(prevState => [...prevState, newNote]);\n    setCurrentNoteId(newNote.id);\n  }\n  function getCurrentNote() {\n    const getCurrentNote = notes.find(note => note.id === currentNoteId);\n    //if currentNote not exist return notes[0] or \" \", other wise delete note not working propely when deleting the current selected note\n    return getCurrentNote || \"\";\n  }\n  function updateNote(e) {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const newArray = [type !== \"checkbox\" ? value : checked];\n    setNotes(prevState => prevState.map(note => {\n      return note.id === currentNoteId ? {\n        ...note,\n        [name]: type !== \"checkbox\" ? value : checked\n      } : note;\n    }));\n    console.log(newArray);\n  }\n  function deleteNote(event, id) {\n    event.stopPropagation();\n    setNotes(oldNotes => oldNotes.filter(note => note.id !== id));\n    console.log(id);\n  }\n\n  /*\n   setNotes(prevState=>\n    prevState.map((note)=>  note.id===currentNoteId ? {...note, text:e.target.value} : note\n     ))\n    setNotes(prevState=>\n     prevState.map((note)=> { return note.id===currentNoteId ? {...note, text:e.target.value} : note}\n      ))\n    setNotes((prevState)=> {\n    return  prevState.map((note)=> {\n       return note.id===currentNoteId ? {...note, text:e.target.value} : note\n     }) \n  */\n\n  console.log(currentNoteId);\n  console.log(notes);\n\n  //<Content getCurrentNote={getCurrentNote()}/>  invoke getCurrentNote() with parenthesis, to executing your function directly and get the return value\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        getCurrentNote: getCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        createNewNote: createNewNote,\n        deleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [\" \", notes.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No notes found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 52\n      }, this) : /*#__PURE__*/_jsxDEV(Content, {\n        getCurrentNote: getCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 76\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NZG9U+gIZonolAOqtRrxWebnpEE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","Sidebar","Content","nanoid","App","notes","setNotes","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","allNotes","stringify","setItem","createNewNote","newNote","title","text","important","prevState","getCurrentNote","find","note","updateNote","e","name","value","type","checked","target","newArray","map","console","log","deleteNote","event","stopPropagation","oldNotes","filter","length"],"sources":["C:/E/Study/Code/react and restful API . hook tutorial/react-note-app/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React,{useState,useEffect} from 'react'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Sidebar from './components/Sidebar'\nimport Content from './components/Content'\nimport {nanoid} from \"nanoid\"\n\nfunction App() {\n\n   //const [notes,setNotes]=useState([])\n   //inital the app by get item from localstorage, remember to add [], as it cause error when lcalstorage \"notes\" not initialized/defined at first time \n   const [notes,setNotes]=useState(()=>JSON.parse(localStorage.getItem(\"notes\"))|| [])\n   //make sure notes[0] exist and then fint the id, or use \"\" instead \n   const [currentNoteId,setCurrentNoteId]=useState(  (notes[0] && notes[0].id) || \"\")\n   \n   useEffect(()=>{\n    const allNotes = JSON.stringify(notes)\n    localStorage.setItem(\"notes\",allNotes)\n   },[notes])\n\n   function createNewNote(){\n    const newNote={\n      id:nanoid(),\n      title:\"new note\",\n      text:\"#Please enter note content here.\",\n      important:false\n    }\n    //use [] , as it is an array\n    setNotes(prevState=> [...prevState, newNote])\n\n    setCurrentNoteId(newNote.id)\n    \n   }\n\n   function getCurrentNote(){\n    const getCurrentNote = notes.find(note => note.id ===currentNoteId)\n    //if currentNote not exist return notes[0] or \" \", other wise delete note not working propely when deleting the current selected note\n    return getCurrentNote || \"\"\n   }\n\n   function updateNote(e){\n    const {name,value,type,checked}=e.target\n    const newArray=[type!==\"checkbox\" ? value : checked]\n    setNotes(prevState=>\n      prevState.map((note)=> { \n        return note.id===currentNoteId ? {...note, [name]:type!==\"checkbox\" ? value : checked} : note}\n\n       ))\n \n   console.log(newArray)\n }     \n\n  function deleteNote(event,id){\n    event.stopPropagation()\n    setNotes(oldNotes=> oldNotes.filter( note=>note.id !== id))\n    console.log(id)\n  }\n \n   /*\n    setNotes(prevState=>\n     prevState.map((note)=>  note.id===currentNoteId ? {...note, text:e.target.value} : note\n      ))\n\n    setNotes(prevState=>\n      prevState.map((note)=> { return note.id===currentNoteId ? {...note, text:e.target.value} : note}\n       ))\n\n    setNotes((prevState)=> {\n     return  prevState.map((note)=> {\n        return note.id===currentNoteId ? {...note, text:e.target.value} : note\n      }) \n   */\n  \n\n \n console.log(currentNoteId)\n console.log(notes)\n\n//<Content getCurrentNote={getCurrentNote()}/>  invoke getCurrentNote() with parenthesis, to executing your function directly and get the return value\n  return (\n    <div className=\"container\"> \n    <div className=\"header\"><Header/></div>\n     <div className=\"sidebar\"><Sidebar notes={notes} getCurrentNote={getCurrentNote()} setCurrentNoteId={setCurrentNoteId} createNewNote={createNewNote} deleteNote={deleteNote}/></div>\n     <div className=\"content\"> {notes.length===0 ? <p>No notes found!</p> :<Content  getCurrentNote={getCurrentNote()} updateNote={updateNote}/> } </div> \n     <div className=\"footer\"><Footer/></div>\n     </div>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}