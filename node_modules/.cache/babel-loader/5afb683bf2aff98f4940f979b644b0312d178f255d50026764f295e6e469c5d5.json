{"ast":null,"code":"var _jsxFileName = \"C:\\\\E\\\\Study\\\\Code\\\\react and restful API . hook tutorial\\\\react-note-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Sidebar from './components/Sidebar';\nimport Content from './components/Content';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [currentNoteId, setCurrentNoteId] = useState(notes[0] && notes[0].id || \"\");\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      text: \"Please enter note content here.\"\n    };\n    //use [] , as it is an array\n    setNotes(prevState => [...prevState, newNote]);\n    setCurrentNoteId(newNote.id);\n  }\n  function getCurrentNote() {\n    const getCurrentNote = notes.find(note => note.id === currentNoteId);\n    //use if ...else, otherwise at the render, getCurrentNote.text does not exist\n    if (getCurrentNote) {\n      return getCurrentNote.text;\n    } else {\n      return \"\";\n    }\n  }\n  function updateNote(e) {\n    setNotes(prevState => prevState.map(note => {\n      return note.id === currentNoteId ? {\n        ...note,\n        text: e.target.value\n      } : note;\n    }));\n  }\n\n  /*\n   setNotes(prevState=>\n    prevState.map((note)=>  note.id===currentNoteId ? {...note, text:e.target.value} : note\n     ))\n    setNotes(prevState=>\n     prevState.map((note)=> { return note.id===currentNoteId ? {...note, text:e.target.value} : note}\n      ))\n    setNotes((prevState)=> {\n    return  prevState.map((note)=> {\n       return note.id===currentNoteId ? {...note, text:e.target.value} : note\n     }) \n  */\n\n  console.log(notes);\n  console.log(currentNoteId);\n\n  //<Content getCurrentNote={getCurrentNote()}/>  invoke getCurrentNote() with parenthesis, to executing your function directly and get the return value\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        setCurrentNoteId: setCurrentNoteId,\n        createNewNote: createNewNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [\" \", notes.length === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewNote,\n        children: \"Create New Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 52\n      }, this) : /*#__PURE__*/_jsxDEV(Content, {\n        getCurrentNote: getCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 110\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XNQssttw6uth+ePmm6cHj+DhxG0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Footer","Sidebar","Content","nanoid","App","notes","setNotes","currentNoteId","setCurrentNoteId","id","createNewNote","newNote","text","prevState","getCurrentNote","find","note","updateNote","e","map","target","value","console","log","length"],"sources":["C:/E/Study/Code/react and restful API . hook tutorial/react-note-app/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React,{useState} from 'react'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Sidebar from './components/Sidebar'\nimport Content from './components/Content'\nimport {nanoid} from \"nanoid\"\n\nfunction App() {\n\n   const [notes,setNotes]=useState([])\n   const [currentNoteId,setCurrentNoteId]=useState( (notes[0] && notes[0].id) || \"\")\n   \n   function createNewNote(){\n    const newNote={\n      id:nanoid(),\n      text:\"Please enter note content here.\"\n    }\n    //use [] , as it is an array\n    setNotes(prevState=> [...prevState, newNote])\n\n    setCurrentNoteId(newNote.id)\n    \n   }\n\n   function getCurrentNote(){\n    const getCurrentNote = notes.find(note => note.id ===currentNoteId)\n    //use if ...else, otherwise at the render, getCurrentNote.text does not exist\n   if (getCurrentNote ){\n    return getCurrentNote.text\n   }\n    else  {return \"\"}\n  \n   }\n\n   function updateNote(e){\n    setNotes(prevState=>\n      prevState.map((note)=> { \n        return note.id===currentNoteId ? {...note, text:e.target.value} : note}\n       ))\n   \n }     \n \n   /*\n    setNotes(prevState=>\n     prevState.map((note)=>  note.id===currentNoteId ? {...note, text:e.target.value} : note\n      ))\n\n    setNotes(prevState=>\n      prevState.map((note)=> { return note.id===currentNoteId ? {...note, text:e.target.value} : note}\n       ))\n\n    setNotes((prevState)=> {\n     return  prevState.map((note)=> {\n        return note.id===currentNoteId ? {...note, text:e.target.value} : note\n      }) \n   */\n  \n\n console.log(notes)\n console.log(currentNoteId)\n\n//<Content getCurrentNote={getCurrentNote()}/>  invoke getCurrentNote() with parenthesis, to executing your function directly and get the return value\n  return (\n    <div className=\"container\"> \n    <div className=\"header\"><Header/></div>\n     <div className=\"sidebar\"><Sidebar notes={notes} setCurrentNoteId={setCurrentNoteId} createNewNote={createNewNote}/></div>\n     <div className=\"content\"> {notes.length===0 ? <button onClick={createNewNote}>Create New Note</button> :<Content  getCurrentNote={getCurrentNote()} updateNote={updateNote}/> } </div> \n     <div className=\"footer\"><Footer/></div>\n     </div>\n\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAAQC,MAAM,QAAO,QAAQ;AAAA;AAE7B,SAASC,GAAG,GAAG;EAAA;EAEZ,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACS,aAAa,EAACC,gBAAgB,CAAC,GAACV,QAAQ,CAAGO,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACI,EAAE,IAAK,EAAE,CAAC;EAEjF,SAASC,aAAa,GAAE;IACvB,MAAMC,OAAO,GAAC;MACZF,EAAE,EAACN,MAAM,EAAE;MACXS,IAAI,EAAC;IACP,CAAC;IACD;IACAN,QAAQ,CAACO,SAAS,IAAG,CAAC,GAAGA,SAAS,EAAEF,OAAO,CAAC,CAAC;IAE7CH,gBAAgB,CAACG,OAAO,CAACF,EAAE,CAAC;EAE7B;EAEA,SAASK,cAAc,GAAE;IACxB,MAAMA,cAAc,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACP,EAAE,KAAIF,aAAa,CAAC;IACnE;IACD,IAAIO,cAAc,EAAE;MACnB,OAAOA,cAAc,CAACF,IAAI;IAC3B,CAAC,MACM;MAAC,OAAO,EAAE;IAAA;EAEjB;EAEA,SAASK,UAAU,CAACC,CAAC,EAAC;IACrBZ,QAAQ,CAACO,SAAS,IAChBA,SAAS,CAACM,GAAG,CAAEH,IAAI,IAAI;MACrB,OAAOA,IAAI,CAACP,EAAE,KAAGF,aAAa,GAAG;QAAC,GAAGS,IAAI;QAAEJ,IAAI,EAACM,CAAC,CAACE,MAAM,CAACC;MAAK,CAAC,GAAGL,IAAI;IAAA,CAAC,CACvE,CAAC;EAER;;EAEE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKCM,OAAO,CAACC,GAAG,CAAClB,KAAK,CAAC;EAClBiB,OAAO,CAACC,GAAG,CAAChB,aAAa,CAAC;;EAE3B;EACE,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBAC1B;MAAK,SAAS,EAAC,QAAQ;MAAA,uBAAC,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAAM,eACtC;MAAK,SAAS,EAAC,SAAS;MAAA,uBAAC,QAAC,OAAO;QAAC,KAAK,EAAEF,KAAM;QAAC,gBAAgB,EAAEG,gBAAiB;QAAC,aAAa,EAAEE;MAAc;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAAM,eACzH;MAAK,SAAS,EAAC,SAAS;MAAA,WAAC,GAAC,EAACL,KAAK,CAACmB,MAAM,KAAG,CAAC,gBAAG;QAAQ,OAAO,EAAEd,aAAc;QAAA,UAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAS,gBAAE,QAAC,OAAO;QAAE,cAAc,EAAEI,cAAc,EAAG;QAAC,UAAU,EAAEG;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE,EAAE,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eACtL;MAAK,SAAS,EAAC,QAAQ;MAAA,uBAAC,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAAM;EAAA;IAAA;IAAA;IAAA;EAAA,QACjC;AAGX;AAAC,GAhEQb,GAAG;AAAA,KAAHA,GAAG;AAkEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}